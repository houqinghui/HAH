1.	Line 17： 接口和核心层提供Blockchain NBI、资源监控、性能监控、报告生成模块，并为上层应用提供四种相应的北向接口：

2.	Line19: “以及另一个是观看本地进程”， 修改为，“另一种则是监控本地进程”。
3.	Line20：“包含读取预定义性能指标统计信息（包括TPS，延迟，成功率等）”修改为“包含读取预定义性能指标统计信息（包括TPS、时延、成功交易数等）”。 “在调用区块链北向接口时记录关键指标，例如创建事务的时间和提交时间，事务结果等。之后使用这些指标来生成统计信息。” 修改为 “在调用区块链北向接口时，每个交易的关键指标（如创建交易的时间、交易提交时间、交易返回结果等）都会被记录下来，并用于生成最终的预定义性能指标统计信息。
4.	Line25：“每个测试都有一个配置文件，用于定义后端区块链网络和测试参数。这些测试可以直接用于测试区块链系统的性能。”修改为，“每次测试都需要设置对应的配置文件，用于定义后端区块链网络信息和测试参数信息。基于这些配置，可以完成区块链系统的性能测试。”
5.	Line27：“预制”修改为“预置”。“后一部分将介绍如何使用基准引擎。当然，开发人员可以直接在而不需要框架的情况下使用NBI来实现他们的测试。”修改为“下面将介绍如何使用基准测试引擎。当然，开发人员也可以不使用测试框架，直接使用NBI完成自有区块链系统的测试。”
6.	Line37： “另一个是区块链配置文件”修改为“另一个是区块链网络配置文件”
7.	Line94: “你可以使用事务名称作为标签名称来告知主要用于测试性能的事务”修改为“你可以使用当前交易目的名称（如开户）作为标签名称，来说明当前性能测试的交易类型”。
8.	Line94之前还是要把name&description 、clients 这些加上，zookeeper那部分代码照原样黏贴。
* **test** - defines the metadata of the test, as well as multiple test rounds with specified workload:
  * **name&description** : human readable name and description of the benchmark, the value is used by the report generator to show in the testing report.
  * **clients** : defines the client type as well as relevant arguments, the 'type' property must be 'local' or 'zookeeper'
    * local: In this case, local processes will be forked and act as blockchain clients. The number of forked clients should be defined by 'number' property.
    * zookeeper: In this case, clients could be located on different machines and take tasks from master via zookeeper. Zookeeper server address as well as the number of simulated blockchain clients which launch locally by zookeeper client should be defined. A example of zookeeper configuration defined is as below:
      ```
      "type": "zookeeper",
      "zoo" : {
        "server": "10.229.42.159:2181",
        "clientsPerHost": 5
      }
      ```
	
9.	Line 95 ： “指定事务的生成模式。支持两种测试事务配置。一个被命名为`real-time` ，这意味着事务将实时生成并立即发送到后端系统。这是Caliper的默认测试模式。若未设置txMode，Caliper将在 `real-time` mode下运行。另一种模式是文件相关的测试模式，这意味着客户端生成的事务将被缓冲，并在发送到后端系统之前保存到文件中。文件模式有两个子类，分别命名为 `file-read` 和 `file-write`。在 `file-read` mode下, Caliper将读取事务文件以进行测试。在文件写入模式下，将根据txNumber，tps，duration等配置设置生成所有事务，然后将这些事务发送到后端系统以完成测试。生成的事务文件保存在当前目录中。如果该目录下的事务文件与当前基准配置文件的参数（如txNumber和客户端编号）不匹配，则Caliper将生成新的事务文件。事务文件可以在docker模式下重复使用，而在自己部署的网络中则不可重复使用。值得注意的是，文件相关的txMode目前仅支持固定发送速率（即速率控制的类型应为固定速率）和fabric（1.0 /1.1 /1.2）。由于Fabric客户端不支持版本1.0,1.1和1.2中的函数sendSignedTransaction, 有必要将文件 `node_modules/fabric-client/lib/Channel.js/ChannelSignedTransaction.js` 重命名为 `node_modules/fabric-client/lib/Channel.js`。与文件相关的txMode标记了在fabric客户端将事务发送到订购者节点之前的转换创建时间。文件txMode和`real-time`txMode之间的创建时间存在明显差异，而后者将创建时间标记为相应适配器处理事务的时间。”修改为，“指定交易的生成模式。当前支持两种测试交易生成模式。一种为`real-time` ，这意味着交易将实时生成并立即发送到后端系统，这也是Caliper的默认交易生成模式，即若未设置txMode，Caliper将在 `real-time` mode下运行。另一种模式是文件测试模式，这意味着客户端生成的交易将被首先保存到文件中，然后再发送到后端系统。文件模式包含两个子类，分别命名为 `file-read` 和 `file-write`。在 `file-read`模式下, Caliper将读取交易文件以进行测试。在`file-write`模式下，将根据txNumber、tps、duration等配置生成所有交易，然后将这些交易发送到后端系统以完成测试。生成的交易文件保存在当前目录中。如果该目录下的交易文件与当前配置文件的参数（如txNumber和客户端编号）不匹配，则Caliper将生成新的交易文件。交易文件可以在docker模式下重复使用，而在自己部署的网络中则不可重复使用。需要注意的是，文件相关的txMode目前仅支持固定发送速率（即速率控制的类型应为固定速率）和fabric（1.0 /1.1 /1.2）。由于Fabric客户端版本1.0、1.1和1.2不支持函数sendSignedTransaction, 在使用文件模式进行测试时，需要将文件`node_modules/fabric-client/lib/Channel.js/ChannelSignedTransaction.js`重命名为 `node_modules/fabric-client/lib/Channel.js`。文件模式和`real-time`模式之间交易的创建时间存在明显差异，前者将fabric客户端发送交易文件到orderer节点之前的时间记录为交易创建时间，而后者将创建时间标记为交易生成的时间。这意味着，在文件模式中交易生成和发送propsal的这段时间未记入当前交易从生成到后端系统确认交易的时间。”
10.	Line96: “每个轮次具有不同的事务编号”修改为“每个轮次有不同的交易数量”
11.	Line97： “定义具有基于时间的测试运行的子轮数组。例如 [150,400] 表示将进行两次运行，第一次测试将运行150秒，第二次运行将运行400秒。如果除txNumber外还有指定，则txDuration选项优先。” 修改为， “定义基于时间测试的子轮数组。例如 [150,400] 表示将进行两次测试，第一次测试将运行150秒，第二次运行将运行400秒。如果当前配置文件中同时指定了txNumber和txDuration，系统将优先根据txDuration设置运行测试。”
12.	Line 98： “定义在基准测试子轮次期间使用的自定义速率控制数组。如果未指定，则默认为“固定费率”，将以设定的1 TPS速率推动基准测试。如果已定义，则速率控制机制必须存在，并且可以提供用于控制消息发送速率的选项，或指定消息速率配置文件。” 修改为 “定义每个子轮测试期间使用的速率控制数组。如果未指定，则默认为“固定速率”，将以1TPS速率发送交易开始测试。如果已定义，务必保证所选用的速率控制机制名称正确并且提供对应的发送速率及所需参数。”
13.	Line99： “对客户端结果执行修剪（trim）操作，以消除测试报告中包含的warm-up和cool-down阶段。如果指定，修剪选项将遵循每轮的measurement。例如, 如果 `txNumber` 在测试模式中，值30表示每个客户端最初和最后的30个交易结果将被修剪掉i、; 如果 `txDuration` 被使用, 则从每个客户端产生的前30秒和后30秒的结果将会被忽略掉。”修改为，“对客户端结果执行修剪（trim）操作，以消除warm-up和cool-down阶段对于测试结果的影响。如果已指定修剪区间，该设置将被应用于该轮测试中。例如, 在`txNumber`测试模式中，值30表示每个客户端发送的最初和最后的30个交易结果将被修剪掉; 在`txDuration`模式下, 则从每个客户端发送的前30秒和后30秒的交易结果将会被忽略掉。”
14.	Line100： “用户自定义参数，将会被直接传递到用户定义的测试模组中”修改为“用户自定义参数，将被传递到用户自定义的测试模块中”
15.	Line101“指明用户在该轮测试中定义的模组”修改为 “指明用户在该轮测试中定义的测试模块”
16.	Line103“另一个是位于主机'192.168上的名为“orderer.example.com”的远程容器。.1.100'，2375是该主机上Docker的侦听端口。”修改为“另一个是位于主机'192.168.1.100'上的名为“orderer.example.com”的远程容器。2375是该主机上Docker的侦听端口。”
17.	Line215 “主服务器”修改为“主进程”
18.	Line217 “在此阶段，主服务器启动循环以根据基准配置文件执行测试。将根据定义的workload生成任务并将其分配给客户端。该阶段将存储客户端返回的性能统计信息以供以后分析。”修改为 “在此阶段，主进程根据配置文件执行测试，将根据定义的workload生成任务并将其分配给客户端子进程。最后将存储各个客户端返回的性能统计信息以供后续分析。”
19.	Line218 “分析每个测试轮次的所有客户的统计数据“修改为“分析每个测试轮次的所有客户端的统计数据”
20.	Line228 “主服务器使用Node.js集群模块来分叉”修改为 “主进程使用Node.js集群模块启动”； “因此本地集群可用于提高客户在多核机器上的性能”修改为“因此本地集群可用于提高客户端在多核机器上的性能”
21.	Line230 “总工作负载被划分并平均分配给子进程。子进程充当区块链客户端，具有临时生成的context以与后端区块链系统交互。context通常包含客户端的标识和加密材料，并将在测试任务完成时发布。”修改为“总工作负载被平均分配给子进程。每个子进程相当于区块链客户端，子进程拥有临时生成的context，可以和后端区块链系统交互。context通常包含客户端的标识和加密信息，在测试结束后context将被释放。”
22.	Line232, “该关系在Fabric配置文件中定义。”修改为“该绑定关系在Fabric配置文件中有相关定义。”
23.	Line234“客户端调用一个测试模块，该模块实现用户定义的测试逻辑。稍后将解释该模块。”修改为“测试时客户端将调用用户定义的测试模块，该模块包含了自定义的测试逻辑。测试模块的相关信息后文会给出解释。”
24.	Line236 “本地客户端仅在第一轮测试开始时启动一次，并在完成所有测试后销毁。”修改为“本地客户端在第一轮测试时启动，并在完成所有测试后被销毁。”
25.	Line248 “该模块实现实际生成和提交事务的功能”修改为 “该模块实现交易生成和提交交易的功能”
26.	Line249：“应该实现和导出三个函数，所有这些函数都应该返回一个Promise对象。”修改为“测试模块主要实现3个函数，所有这些函数都应该返回一个Promise对象。”
27.	Line251：“将在每个测试轮次开始时由客户端调用给定的区块链对象和上下文，以及从基准配置文件中读取的用户定义的参数。应保存区块链对象和context供以后使用，其他初始化工作可在此处实现。”修改为“将在每个测试轮次开始时由客户端调用。所需参数包括当前区块链对象、上下文以及从基准配置文件中读取的用户定义的参数。在该函数内可以保存区块链对象和context供以后使用，其他初始化工作也可在此处实现。”
28.	Line252：“建议每次调用只提交一个事务，但这不是必须的。如果每次提交多个事务，则实际工作负载可能与配置的工作负载不同。该函数应以异步方式运行。”修改为“建议每次调用只提交一个事务；如果每次提交多个事务，则实际工作负载可能与配置的工作负载不同。请确保该函数应以异步方式运行。”
29.	Line253：“将在每轮测试结束时调用，任何清算工作都应在此处实施”修改为“将在每轮测试结束时调用，任何结束时需要释放信息的工作都应在此处执行。”
